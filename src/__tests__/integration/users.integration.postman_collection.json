{
	"info": {
		"_postman_id": "0cfd390f-0912-4fcd-b4e7-b4bc9be4a78e",
		"name": "UsersIntegration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20591382"
	},
	"item": [
		{
			"name": "CREATE",
			"item": [
				{
					"name": "Create First Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body has a user_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.exist;",
									"    // Stocker l'id du user pour la suite des tests (GET/PUT/DELETE)",
									"    pm.environment.set(\"user_admin_id\", jsonData.user_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Leo\",\n  \"last_name\": \"Admin\",\n  \"email\": \"admin@example.com\",\n  \"phone\": \"0611223344\",\n  \"password\": \"s3curePassword1234\",\n  \"role\": 1,\n  \"locale\": \"fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body has a user_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.exist;",
									"    pm.environment.set(\"user1_id\", jsonData.user_id);",
									"});",
									"",
									"// Stocker l'id du user pour la suite des tests (GET/PUT/DELETE)",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"user1_id\", jsonData.user_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Leo\",\n  \"last_name\": \"Camptester1\",\n  \"email\": \"leo.tester@example.com\",\n  \"phone\": \"0611223345\",\n  \"password\": \"s3curePassword1234\",\n  \"role\": 0,\n  \"locale\": \"fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Should fail - 2nd User same mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"});",
									"pm.test(\"Message d'erreur doublon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error || jsonData.message).to.include(\"Email already in use\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Leo\",\n  \"last_name\": \"Tester\",\n  \"email\": \"leo.tester@example.com\",\n  \"phone\": \"0622334455\",\n  \"password\": \"s3curePassword1234\",\n  \"role\": 0,\n  \"locale\": \"fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Should fail - 2nd User same phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"});",
									"pm.test(\"Message d'erreur doublon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error || jsonData.message).to.include(\"Phone already in use\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Leo\",\n  \"last_name\": \"Tester\",\n  \"email\": \"leo.tester2@example.com\",\n  \"phone\": \"0611223345\",\n  \"password\": \"s3curePassword1234\",\n  \"role\": 0,\n  \"locale\": \"fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body has a user_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.exist;",
									"    pm.environment.set(\"user2_id\", jsonData.user_id);",
									"});",
									"",
									"// Stocker l'id du user pour la suite des tests (GET/PUT/DELETE)",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"user2_id\", jsonData.user_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Leo\",\n  \"last_name\": \"Camptester2\",\n  \"email\": \"leo.tester2@example.com\",\n  \"phone\": \"0611223346\",\n  \"password\": \"s3curePassword1234\",\n  \"role\": 0,\n  \"locale\": \"fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LOGIN",
			"item": [
				{
					"name": "Login with good password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User returned without password_hash\", function () {",
									"  var json = pm.response.json();",
									"  pm.expect(json).to.have.property('email');",
									"  pm.expect(json).to.not.have.property('password_hash');",
									"});",
									"var json = pm.response.json();",
									"pm.environment.set('jwt_user', json.token);",
									"var json = pm.response.json();",
									"pm.environment.set('user1_id', json.user_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identifier\": \"leo.tester@example.com\",\n  \"password\": \"s3curePassword1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log admin with good password Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User returned without password_hash\", function () {",
									"  var json = pm.response.json();",
									"  pm.expect(json).to.have.property('email');",
									"  pm.expect(json).to.not.have.property('password_hash');",
									"});",
									"var json = pm.response.json();",
									"pm.environment.set('jwt_admin', json.token);",
									"var json = pm.response.json();",
									"pm.environment.set('user_admin_id', json.user_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identifier\": \"admin@example.com\",\n  \"password\": \"s3curePassword1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Error message invalid credentials\", function () {",
									"  var json = pm.response.json();",
									"  pm.expect(json.error).to.eql(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identifier\": \"leo.tester@example.com\",\n  \"password\": \"badpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/users/login",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ADMIN ONLY",
			"item": [
				{
					"name": "Get All Users (by a not admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (non-admin)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Forbidden error message (non-admin)\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json.error).to.include(\"Forbidden\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_user}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (admin)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body is array of users (admin)\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(Array.isArray(json)).to.be.true;",
									"    pm.expect(json.length).to.be.greaterThan(0); // ou >= 0 si la table peut être vide",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8000/api/users/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (admin)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User with correct user is returned (admin)\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json).to.have.property('last_name', 'Admin');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/users/email/admin@example.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"email",
								"admin@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by email (by a user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (non-admin)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Forbidden error message (non-admin)\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json.error).to.include(\"Forbidden\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_user}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/users/email/admin@example.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"email",
								"admin@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (admin)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User with correct phone is returned (admin)\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json).to.have.property('last_name', 'Admin');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8000/api/users/phone/0611223344",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"phone",
								"0611223344"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete any User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 (admin delete)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8000/api/users/{{user1_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"{{user1_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Delete own User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 (self delete)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_user}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/api/users/{{user1_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"{{user1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should fail - Delete another User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (user can't delete another)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Forbidden error message\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json.error).to.include(\"Forbidden\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_user}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8000/api/users/{{user2_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"users",
								"{{user2_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Own User",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/users/{{user1_id}}",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Last name is Updated\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.last_name).to.eql(\"Admin Updated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"last_name\": \"Admin Updated\",\n  \"email\": \"admin@example.com\",\n  \"phone\": \"0611223344\",\n  \"password\": \"s3curePassword4567\",\n  \"role\": 1,\n  \"locale\": \"en\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/users/{{user_admin_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users",
						"{{user_admin_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Ajoute automatiquement le header Authorization si un token est présent",
					"if (pm.environment.get(\"jwt\")) {",
					"    pm.request.headers.upsert({",
					"        key: \"Authorization\",",
					"        value: \"Bearer \" + pm.environment.get(\"jwt\"),",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}