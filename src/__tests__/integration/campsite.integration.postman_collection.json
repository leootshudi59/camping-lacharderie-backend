{
	"info": {
		"_postman_id": "cca34727-642b-4bd1-8828-c2b6adb195b0",
		"name": "CampsiteIntegration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20591382"
	},
	"item": [
		{
			"name": "CREATE",
			"item": [
				{
					"name": "Create first item available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
									"",
									"const id = pm.response.json().campsite_id;",
									"pm.environment.set(\"campsite1_id\", id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Emplacement 13 - Ch√¢let\",\n  \"type\": \"chalet\",\n  \"description\": \"Un super chalet tr√®s zen\",\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/campsites/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"campsites",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create second item no desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"const id = pm.response.json().campsite_id;",
									"pm.environment.set(\"campsite2_id\", id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Emplacement 7 - Mobil home 4 personnes \",\n  \"type\": \"mobilhome\",\n  \"status\": \"busy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8000/api/campsites/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"campsites",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"/**",
							" * Pre-request script ex√©cut√© avant chaque requ√™te du dossier.",
							" * S'il n‚Äôexiste pas de JWT admin, on fait un login et on le stocke.",
							" */",
							"if (!pm.environment.get(\"jwt_admin\")) {",
							"  console.log(\"üîê No jwt_admin found ‚Üí performing admin login‚Ä¶\");",
							"",
							"  const loginReq = {",
							"    url: \"localhost:8000/api/users/login\",",
							"    method: \"POST\",",
							"    header: { \"Content-Type\": \"application/json\" },",
							"    body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({",
							"        identifier: \"admin@example.com\",",
							"        password:   \"s3curePassword1234\"",
							"      })",
							"    }",
							"  };",
							"",
							"  /**",
							"   * pm.sendRequest est ASYNCHRONE.",
							"   * Tant que le callback n'est pas termin√©, Postman met la requ√™te courante ‚Äúen pause‚Äù.",
							"   * Une fois le token stock√©, la requ√™te courante reprendra avec l‚ÄôAuthorization dans ses headers.",
							"   */",
							"  pm.sendRequest(loginReq, (err, res) => {",
							"    if (err) {",
							"      console.error(\"‚ùå Admin login failed:\", err);",
							"      // On peut interrompre la collection si n√©cessaire",
							"      throw new Error(\"Admin login failed\");",
							"    }",
							"",
							"    const token = res.json().token;",
							"    if (!token) {",
							"      throw new Error(\"No token in login response\");",
							"    }",
							"",
							"    pm.environment.set(\"jwt_admin\", token);",
							"    console.log(\"‚úÖ jwt_admin saved to environment\");",
							"  });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "Get all Campsites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has at least 1 campsite\", () => {",
									"  const arr = pm.response.json();",
									"  pm.expect(arr.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8000/api/campsites/",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"campsites",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Campsite by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"‚úÖ 200 OK\", () => pm.response.to.have.status(200));",
									"pm.test(\"Nom correct\", () => {",
									"    pm.expect(pm.response.json().name).to.eql(\"Emplacement 13 - Ch√¢let\");   ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "localhost:8000/api/campsites/{{campsite1_id}}",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"campsites",
								"{{campsite1_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Campsite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"})",
							"pm.test(\"Name updated\", function () {",
							"  pm.expect(pm.response.json().name).to.eql(\"Emplacement 11 - Ch√¢let\");",
							"});",
							"pm.test(\"Status updated\", function () {",
							"  pm.expect(pm.response.json().status).to.eql(\"busy\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emplacement 11 - Ch√¢let\",\n  \"status\": \"busy\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/campsites/{{campsite1_id}}",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"campsites",
						"{{campsite1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 No Content\", function () { ",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/campsites/{{campsite1_id}}",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"campsites",
						"{{campsite1_id}}"
					]
				}
			},
			"response": []
		}
	]
}